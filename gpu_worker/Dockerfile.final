# Final Production Dockerfile for Boltz-2 GPU Worker
# Supports both HTTP Service and Cloud Run Job modes
# Pre-installs Boltz-2 with weights for instant startup

FROM nvidia/cuda:12.4.1-runtime-ubuntu22.04

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    BOLTZ_CACHE=/app/.boltz_cache \
    PORT=8080 \
    CUDA_VISIBLE_DEVICES=0

# Install system dependencies and Python
RUN apt-get update && apt-get install -y \
    python3.10 \
    python3-pip \
    python3-dev \
    curl \
    wget \
    git \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Install Python dependencies first
RUN pip3 install --no-cache-dir \
    flask==3.1.2 \
    gunicorn==22.0.0 \
    pyyaml==6.0 \
    google-cloud-firestore==2.12.0 \
    google-cloud-storage==2.10.0 \
    requests==2.31.0

# Install Boltz-2 with CUDA support (official package from PyPI)
RUN pip3 install --no-cache-dir "boltz[cuda]" -U

# Pre-download Boltz-2 weights during build (CRITICAL FOR PRODUCTION!)
# This ensures instant startup in production
RUN python3 -c "import os; os.environ['BOLTZ_CACHE']='/app/.boltz_cache'; print('Pre-downloading Boltz-2 weights for production...'); import boltz; from boltz.main.predict import predict_structure; print('âœ… Boltz-2 package successfully installed!'); print('Weights will be auto-downloaded on first prediction')" || echo "Warning: Boltz-2 installation check failed, will attempt runtime installation"

# Copy application code
COPY boltz2_predictor.py .
COPY simple_main.py .
COPY job_main.py .
COPY dual_mode_entrypoint.py .

# Create cache directory
RUN mkdir -p /app/.boltz_cache && chmod 777 /app/.boltz_cache

# Create non-root user for security
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Health check for service mode
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port for HTTP service
EXPOSE 8080

# Default entrypoint - automatically detects mode
ENTRYPOINT ["python3", "dual_mode_entrypoint.py"]