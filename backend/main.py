"""
OMTX-Hub FastAPI Backend with GCP Integration
Complete GCP-powered ML inference platform using Firestore + Cloud Storage
"""

import os
import uuid
import time
import base64
from datetime import datetime
from typing import List, Optional
from enum import Enum
import json
import tempfile
from pathlib import Path

# Load environment variables
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("✅ Environment variables loaded from .env file")
except ImportError:
    print("⚠️ python-dotenv not installed, relying on system environment variables")

from fastapi import FastAPI, HTTPException, BackgroundTasks, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from pydantic import BaseModel, Field, validator
import uvicorn

# Import unified endpoints
from api.unified_endpoints import router as unified_router
from api.enhanced_results_endpoints import router as enhanced_results_router
from api.unified_batch_api import router as unified_batch_router  # NEW UNIFIED BATCH API
from api.individual_jobs_fix import router as individual_jobs_router  # NEW INDIVIDUAL JOBS API
from api.model_endpoints import router as model_router
from api.rfantibody_endpoints import router as rfantibody_router
from api.chai1_endpoints import router as chai1_router
# Legacy batch endpoints removed - now using unified_batch_api
# from api.batch_endpoints import router as batch_router
# from api.batch_download_endpoints import router as batch_download_router
# from api.quick_batch_fix import router as quick_batch_router

# Import Modal for calling deployed functions
import modal

# Import Modal for predictions
try:
    import modal
    # Don't import the modal_app to avoid authentication conflicts
    # from models.boltz2_model import app as modal_app
    boltz2_predict_modal = modal.Function.from_name("omtx-hub-boltz2-persistent", "boltz2_predict_modal")
    # rfantibody_predict_modal = modal.Function.from_name("omtx-hub-rfantibody-phase2", "rfantibody_predict")
    chai1_predict_modal = modal.Function.from_name("omtx-hub-chai1", "chai1_predict_modal")
    print("✅ Modal functions loaded successfully")
except ImportError as e:
    print(f"❌ Could not import Modal: {e}")
    boltz2_predict_modal = None
    # rfantibody_predict_modal = None
    chai1_predict_modal = None
except Exception as e:
    print(f"❌ Could not load Modal functions: {e}")
    boltz2_predict_modal = None
    # rfantibody_predict_modal = None
    chai1_predict_modal = None

# Import GCP database layer
from database.unified_job_manager import unified_job_manager

# Modal monitoring replaced with on-demand status checking
# from services.modal_monitor import modal_monitor, start_modal_monitor, stop_modal_monitor

# Import the new completion checker service
from services.modal_completion_checker import modal_completion_checker, start_completion_checker, stop_completion_checker

# Import performance optimizations
from database.performance_indexes import performance_indexes

# File conversion utilities (same as original)
class FileConverter:
    """Handles conversion between different molecular file formats"""
    
    @staticmethod
    def cif_to_pdb(cif_content: str) -> str:
        """Convert CIF format to PDB format"""
        try:
            # For now, implement a basic converter
            # In production, use BioPython: from Bio.PDB import MMCIFIO, PDBParser
            lines = cif_content.split('\n')
            pdb_lines = []
            
            # Basic CIF to PDB conversion (simplified)
            # This should be replaced with proper BioPython conversion
            pdb_lines.append("HEADER    PROTEIN STRUCTURE PREDICTION")
            pdb_lines.append("REMARK   Generated by OMTX-Hub")
            
            for line in lines:
                if line.startswith('_atom_site'):
                    continue
                if 'ATOM' in line or 'HETATM' in line:
                    pdb_lines.append(line)
            
            pdb_lines.append("END")
            return '\n'.join(pdb_lines)
            
        except Exception as e:
            print(f"Error converting CIF to PDB: {e}")
            return cif_content  # Return original if conversion fails

# Data models (same as original)
class JobStatusEnum(str, Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"

class ModelType(str, Enum):
    BOLTZ2 = "boltz2"

class TaskType(str, Enum):
    PROTEIN_LIGAND_BINDING = "protein_ligand_binding"
    PROTEIN_STRUCTURE = "protein_structure"
    PROTEIN_COMPLEX = "protein_complex"
    BINDING_SITE_PREDICTION = "binding_site_prediction"
    VARIANT_COMPARISON = "variant_comparison"
    DRUG_DISCOVERY = "drug_discovery"

class JobRequest(BaseModel):
    model_name: ModelType = Field(..., description="Model to use for prediction")
    task_type: TaskType = Field(..., description="Type of prediction task")
    input_data: dict = Field(..., description="Input data for the prediction")
    batch_name: Optional[str] = Field(None, description="Name for batch jobs")

class JobResponse(BaseModel):
    job_id: str
    batch_id: Optional[str] = None
    status: JobStatusEnum
    message: str
    estimated_time: Optional[int] = None

class JobListResponse(BaseModel):
    jobs: List[dict]
    total: int
    page: int
    per_page: int

class BatchListResponse(BaseModel):
    batches: List[dict]
    total: int
    page: int
    per_page: int

class TaskPredictRequest(BaseModel):
    input_data: dict = Field(..., description="Task-specific input data")
    job_name: str = Field(..., description="Job name")
    task_type: str = Field(..., description="Type of prediction task")
    use_msa: bool = Field(True, description="Whether to use MSA server")
    use_potentials: bool = Field(False, description="Whether to use potentials")
    
    @validator('job_name')
    def validate_job_name(cls, v):
        """Validate job name is not empty."""
        if not v or not v.strip():
            raise ValueError("Job name is required and cannot be empty")
        if len(v.strip()) > 200:
            raise ValueError("Job name cannot exceed 200 characters")
        return v.strip()
    
    @validator('input_data')
    def validate_input_data(cls, v):
        """Validate that input_data contains required protein_name for relevant tasks."""
        # For protein-related tasks, ensure protein_name or target_name is provided
        protein_name = v.get('protein_name') or v.get('target_name')
        if not protein_name or not str(protein_name).strip():
            raise ValueError("protein_name (or target_name for antibody design) is required in input_data")
        
        return v

class TaskPredictResponse(BaseModel):
    job_id: str
    task_type: str
    status: str
    message: str
    output_data: Optional[dict] = None
    estimated_completion_time: Optional[int] = None

# FastAPI app setup
app = FastAPI(
    title="OMTX-Hub API",
    description="Model-as-a-Service API for computational biology predictions",
    version="1.0.0"
)

# Performance optimization middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)  # Compress responses > 1KB

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:8080", "http://localhost:5173", "http://localhost:8081"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include unified endpoints
app.include_router(unified_router, prefix="/api/v2", tags=["Unified API"])

# Include enhanced results endpoints (NEW UNIFIED ARCHITECTURE)
app.include_router(enhanced_results_router, tags=["Enhanced Results"])

# Include optimized results API (PERFORMANCE OPTIMIZED)
from api.optimized_results_api import router as optimized_results_router
app.include_router(optimized_results_router, tags=["Optimized Results"])

# Include unified batch API (PHASE 3 COMPLETE - ENTERPRISE BATCH PROCESSING)
app.include_router(unified_batch_router, tags=["Unified Batch API v3"])

# Include individual jobs fix API (INDIVIDUAL JOBS LOADING FIX)
app.include_router(individual_jobs_router, prefix="/api", tags=["Individual Jobs Fix"])

# Legacy batch endpoints retired - replaced by unified_batch_api v3
# All batch processing now handled by unified_batch_router
# app.include_router(quick_batch_router, tags=["Quick Batch Fix"])
# app.include_router(batch_router, prefix="/api/v2/batch", tags=["Batch Processing"])
# app.include_router(batch_download_router, prefix="/api/v2", tags=["Batch Downloads"])

# Include model discovery endpoints
app.include_router(model_router, prefix="/api/v2", tags=["Model Discovery"])

# Include model-specific endpoints
app.include_router(rfantibody_router, prefix="/api/v2/models/rfantibody", tags=["RFAntibody"])
app.include_router(chai1_router, prefix="/api/v2/models/chai1", tags=["Chai-1"])

# Include performance monitoring endpoints
from api.performance_monitoring import router as performance_router
app.include_router(performance_router, tags=["Performance Monitoring"])

# Include batch storage fix endpoints
from api.batch_storage_fix import router as batch_fix_router
app.include_router(batch_fix_router, prefix="/api/v3/batch-fix", tags=["Batch Storage Fix"])

# Include ultra-fast unified API (PERFORMANCE OPTIMIZATION)
from api.ultra_fast_unified_api import router as ultra_fast_router
app.include_router(ultra_fast_router, tags=["Ultra Fast Unified API"])

# Include batch completion monitoring API (BATCH COMPLETION DETECTION)
from api.batch_completion_monitoring import router as batch_completion_router
app.include_router(batch_completion_router, tags=["Batch Completion Monitoring"])

# Initialize post-processing integration
try:
    from services.post_processing_integration import initialize_integration
    from database.unified_job_manager import unified_job_manager
    from services.gcp_storage_service import gcp_storage_service
    
    # Initialize the post-processing service
    integration_service = initialize_integration(unified_job_manager, gcp_storage_service)
    print("✅ Post-processing integration initialized successfully")
except ImportError as e:
    print(f"⚠️ Post-processing dependencies not available: {e}")
    print("   Install with: pip install MDAnalysis scikit-learn rdkit numba")
except Exception as e:
    print(f"⚠️ Post-processing integration failed: {e}")
    print("   System will use fallback mock data")

# Background tasks
import asyncio

# Background job processing DISABLED
background_task_running = False  # DISABLED: Prevents unwanted automatic Modal submissions

async def background_job_processor():
    """Process pending jobs automatically"""
    global background_task_running
    background_task_running = True
    
    print("🚀 Starting background job processor...")
    
    while background_task_running:
        try:
            # Get pending jobs that need to be started
            pending_jobs = unified_job_manager.get_jobs_by_status('pending')
            
            if pending_jobs:
                # Filter for protein_ligand_binding tasks (batch jobs) that are NOT part of active batches
                batch_jobs = []
                for job in pending_jobs:
                    if job.get('input_data', {}).get('task_type') == 'protein_ligand_binding':
                        # Check if this job is part of a recently created batch (skip if created in last 5 minutes)
                        created_at = job.get('created_at')
                        if created_at:
                            import time
                            if isinstance(created_at, (int, float)):
                                job_age = time.time() - created_at
                            else:
                                # Handle Firestore timestamp
                                job_age = time.time() - created_at.timestamp() if hasattr(created_at, 'timestamp') else 300
                            
                            # Only process jobs older than 5 minutes (not part of active batch submission)
                            if job_age > 300:  # 5 minutes
                                batch_jobs.append(job)
                        else:
                            # No created_at, process it
                            batch_jobs.append(job)
                
                if batch_jobs:
                    # Limit to 5 concurrent jobs to avoid overload
                    jobs_to_process = batch_jobs[:5]
                    print(f"🔄 Processing {len(jobs_to_process)} pending individual jobs (excluding recent batch jobs)...")
                    
                    for job in jobs_to_process:
                        try:
                            await process_pending_job(job)
                        except Exception as e:
                            print(f"❌ Error processing job {job.get('id')}: {e}")
            
            # Sleep for 30 seconds before checking again
            await asyncio.sleep(30)
            
        except Exception as e:
            print(f"❌ Error in background job processor: {e}")
            await asyncio.sleep(30)

async def process_pending_job(job: dict):
    """Process a single pending job"""
    job_id = job.get('id')
    if not job_id:
        return
    
    print(f"🔄 Starting job {job_id}")
    
    # Update status to running
    unified_job_manager.update_job_status(job_id, "running")
    
    # Import task handler to process the job
    from tasks.task_handlers import task_handler_registry
    
    # Extract input data
    input_data = job.get('input_data', {})
    
    # Process task
    result = await task_handler_registry.process_task(
        task_type='protein_ligand_binding',
        input_data={
            'protein_sequence': input_data.get('protein_sequence'),
            'ligand_smiles': input_data.get('ligand_smiles'),
            'protein_name': input_data.get('protein_name', 'BatchProtein'),
            'ligand_name': input_data.get('ligand_name', 'Unknown')
        },
        job_name=input_data.get('job_name', f"Batch Job {job_id[:8]}"),
        job_id=job_id,
        use_msa=input_data.get('use_msa', True),
        use_potentials=input_data.get('use_potentials', False)
    )
    
    # Update job with result
    if result.get('status') == 'running' and result.get('modal_call_id'):
        # Async job started, update with Modal call ID
        unified_job_manager.update_job_status(job_id, "running", result)
        print(f"✅ Job {job_id} started on Modal")
    else:
        # Sync job completed
        unified_job_manager.update_job_status(job_id, "completed", result)
        print(f"✅ Job {job_id} completed")

@app.on_event("startup")
async def startup_event():
    """Start background services when FastAPI starts"""
    
    # Initialize GCP storage buckets
    print("🗂️ Initializing GCP services...")
    await initialize_gcp_services()
    
    # Initialize performance indexes
    print("🔧 Setting up performance optimizations...")
    await performance_indexes.ensure_indexes_exist()
    
    # Background job processor DISABLED to prevent unwanted Modal submissions
    # asyncio.create_task(background_job_processor())
    print("⚠️ Background job processor DISABLED (prevents unwanted Modal submissions)")
    
    # Start Modal completion checker service
    asyncio.create_task(start_completion_checker())
    print("🚀 Modal completion checker started")
    
    # Modal monitoring replaced with on-demand status checking in APIs
    print("✅ Modal job status checking ready (on-demand via API calls)")

@app.on_event("shutdown")
async def shutdown_event():
    """Stop background services when FastAPI shuts down"""
    global background_task_running
    background_task_running = False
    stop_completion_checker()
    print("🛑 Shutting down OMTX-Hub backend...")
    print("🛑 Background job processor stopped")
    print("🛑 Modal completion checker stopped")
    print("✅ Backend shutdown complete")

# Initialize GCP services on startup
async def initialize_gcp_services():
    """Initialize GCP Firestore and Cloud Storage"""
    try:
        if unified_job_manager.available:
            print("✅ GCP services (Firestore + Cloud Storage) initialized successfully")
        else:
            print("⚠️ GCP services not fully available - check credentials")
    except Exception as e:
        print(f"❌ Error initializing GCP services: {e}")

# Job processing functions (updated for GCP)
async def process_boltz2_job(job_id: str, input_data: dict):
    """Process a Boltz2 prediction job using Modal"""
    try:
        print(f"Starting Boltz2 processing for job {job_id}")
        
        # Update job status to running
        unified_job_manager.update_job_status(job_id, "running")
        
        # Validate required inputs
        sequences = input_data.get("input_data", {}).get("sequences", [])
        if not sequences:
            raise ValueError("No sequences provided")
        
        # Call the Modal function
        if boltz2_predict_modal is None:
            raise Exception("Modal function not available")
        
        print(f"Calling Modal function with sequences: {len(sequences)}")
        result = boltz2_predict_modal.remote(input_data)
        print(f"Modal function completed for job {job_id}")
        
        # Update job with results
        unified_job_manager.update_job_output(job_id, result)
        
        # Save output files to GCP Storage
        from services.gcp_storage_service import gcp_storage_service
        await gcp_storage_service.store_job_results(job_id, result, task_type)
        
        # Mark job as completed
        unified_job_manager.update_job_status(job_id, "completed")
        print(f"Job {job_id} completed successfully")
        
    except Exception as e:
        error_msg = f"Job {job_id} failed: {str(e)}"
        print(error_msg)
        unified_job_manager.update_job_status(job_id, "failed", str(e))

# API Routes (updated for GCP)
@app.post("/api/jobs", response_model=JobResponse)
async def create_job(job_request: JobRequest, background_tasks: BackgroundTasks):
    """Create a new prediction job"""
    try:
        input_data = job_request.input_data
        sequences = input_data.get("input_data", {}).get("sequences", [])
        
        if not sequences:
            raise HTTPException(status_code=400, detail="No sequences provided in input data")
        
        # Check if this is a batch job (multiple ligands)
        ligands = [seq.get("ligand") for seq in sequences if seq.get("ligand")]
        is_batch = len(ligands) > 1
        
        if is_batch:
            # Create batch
            batch_name = job_request.batch_name or f"Batch {datetime.now().strftime('%Y%m%d_%H%M%S')}"
            batch = unified_job_manager.create_batch(
                batch_name=batch_name,
                model_name=job_request.model_name.value,
                total_jobs=len(ligands),
                common_input_data={
                    "task_type": job_request.task_type.value,
                    "protein_sequences": [seq.get("protein", {}).get("sequence") for seq in sequences if seq.get("protein")],
                    "use_msa": input_data.get("use_msa", True),
                    "use_potentials": input_data.get("use_potentials", False)
                }
            )
            batch_id = batch["id"]
            
            # Create individual jobs for each ligand
            job_ids = []
            for i, ligand in enumerate(ligands):
                # Create job-specific input data
                job_input_data = {
                    "task_type": job_request.task_type.value,
                    "input_data": {
                        "sequences": [
                            sequences[0],  # protein sequence
                            {"ligand": ligand}  # specific ligand
                        ]
                    },
                    "use_msa": input_data.get("use_msa", True),
                    "use_potentials": input_data.get("use_potentials", False)
                }
                
                job = unified_job_manager.create_job(
                    model_name=job_request.model_name.value,
                    input_data=job_input_data,
                    batch_id=batch_id,
                    batch_index=i,
                    ligand_name=ligand.get("id", f"Ligand_{i+1}")
                )
                
                job_id = job["id"]
                job_ids.append(job_id)
                
                # Process job in background
                if job_request.model_name == ModelType.BOLTZ2:
                    background_tasks.add_task(process_boltz2_job, job_id, job_input_data)
            
            return JobResponse(
                job_id=job_ids[0],  # Return first job ID
                batch_id=batch_id,
                status=JobStatusEnum.PENDING,
                message=f"Batch created with {len(ligands)} jobs",
                estimated_time=len(ligands) * 10 * 60
            )
        else:
            # Single job
            job = unified_job_manager.create_job(
                model_name=job_request.model_name.value,
                input_data=input_data
            )
            
            job_id = job["id"]
            
            # Process job in background
            if job_request.model_name == ModelType.BOLTZ2:
                background_tasks.add_task(process_boltz2_job, job_id, input_data)
            
            return JobResponse(
                job_id=job_id,
                status=JobStatusEnum.PENDING,
                message="Job created successfully",
                estimated_time=10 * 60
            )
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create job: {str(e)}")

@app.get("/api/jobs", response_model=JobListResponse)
async def list_jobs(page: int = 1, per_page: int = 20):
    """List all jobs with pagination"""
    try:
        offset = (page - 1) * per_page
        jobs = unified_job_manager.get_all_jobs(limit=per_page, offset=offset)
        
        # Get total count (simplified - in production, make a separate count query)
        total = len(jobs) + offset if len(jobs) == per_page else len(jobs) + offset
        
        return JobListResponse(
            jobs=jobs,
            total=total,
            page=page,
            per_page=per_page
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list jobs: {str(e)}")

@app.get("/api/jobs/{job_id}")
async def get_job(job_id: str):
    """Get job details by ID"""
    try:
        job = unified_job_manager.get_job(job_id)
        if not job:
            raise HTTPException(status_code=404, detail="Job not found")
        return job
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get job: {str(e)}")

@app.get("/api/jobs/{job_id}/download/{format}")
async def download_structure(job_id: str, format: str):
    """Download structure file in specified format"""
    try:
        job = unified_job_manager.get_job(job_id)
        if not job:
            raise HTTPException(status_code=404, detail="Job not found")
        
        if job["status"] != "completed":
            raise HTTPException(status_code=400, detail="Job not completed")
        
        # Get job files
        files = unified_job_manager.get_job_files(job_id)
        target_file = None
        
        if format.lower() == "cif":
            target_file = next((f for f in files if f["file_type"] == "cif"), None)
        elif format.lower() == "pdb":
            target_file = next((f for f in files if f["file_type"] == "pdb"), None)
        
        if not target_file:
            # Fallback: Check if the job has result data with structure content
            results = job.get("results", {})
            
            if format.lower() == "cif":
                # Try to get CIF content from results
                structure_content = results.get("structure_file_content", "")
                if not structure_content:
                    # Try base64 decoded content
                    structure_base64 = results.get("structure_file_base64", "")
                    if structure_base64:
                        try:
                            structure_content = base64.b64decode(structure_base64).decode('utf-8')
                        except Exception as e:
                            print(f"Failed to decode base64 structure: {e}")
                
                if structure_content:
                    return Response(
                        content=structure_content,
                        media_type="chemical/x-cif",
                        headers={"Content-Disposition": f"attachment; filename={job_id}.cif"}
                    )
            
            raise HTTPException(status_code=404, detail=f"No {format} file found for this job")
        
        # Download from GCP Cloud Storage
        file_content = unified_job_manager.download_job_file(job_id, target_file["file_name"])
        
        # Determine content type
        content_type = target_file.get("content_type", "application/octet-stream")
        
        return Response(
            content=file_content,
            media_type=content_type,
            headers={"Content-Disposition": f"attachment; filename={target_file['file_name']}"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to download file: {str(e)}")

@app.get("/api/jobs/{job_id}/download-structure")
async def download_structure_query_param(job_id: str, format: str = "cif"):
    """Download structure file with query parameter format (frontend compatibility)"""
    # This endpoint supports the frontend's expected pattern: /api/jobs/{jobId}/download-structure?format=cif
    # It simply calls the existing download endpoint
    return await download_structure(job_id, format)

@app.get("/api/jobs/{job_id}/export")
async def export_job_data(job_id: str):
    """Export complete job data as JSON"""
    try:
        job = unified_job_manager.get_job(job_id)
        if not job:
            raise HTTPException(status_code=404, detail="Job not found")
        
        # Get job files
        files = unified_job_manager.get_job_files(job_id)
        
        export_data = {
            "job": job,
            "files": files,
            "exported_at": datetime.utcnow().isoformat()
        }
        
        json_content = json.dumps(export_data, indent=2)
        
        return Response(
            content=json_content,
            media_type="application/json",
            headers={"Content-Disposition": f"attachment; filename=job_{job_id}_export.json"}
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to export job: {str(e)}")

@app.get("/api/batches", response_model=BatchListResponse)
async def list_batches(page: int = 1, per_page: int = 20):
    """List all job batches with pagination"""
    try:
        offset = (page - 1) * per_page
        batches = unified_job_manager.get_all_batches(limit=per_page, offset=offset)
        
        # Get total count (simplified)
        total = len(batches) + offset if len(batches) == per_page else len(batches) + offset
        
        return BatchListResponse(
            batches=batches,
            total=total,
            page=page,
            per_page=per_page
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list batches: {str(e)}")

@app.get("/api/batches/{batch_id}")
async def get_batch(batch_id: str):
    """Get batch details with all jobs"""
    try:
        batch = unified_job_manager.get_batch(batch_id)
        if not batch:
            raise HTTPException(status_code=404, detail="Batch not found")
        
        jobs = unified_job_manager.get_batch_jobs(batch_id)
        
        return {
            "batch": batch,
            "jobs": jobs
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get batch: {str(e)}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "database": "gcp_firestore",
        "storage": "gcp_cloud_storage"
    }

@app.get("/api/system/status")
async def system_status():
    """Get system status including background services"""
    return {
        "timestamp": datetime.utcnow().isoformat(),
        "background_job_processor": {
            "running": background_task_running,
            "status": "active" if background_task_running else "stopped"
        },
        "modal_completion_checker": modal_completion_checker.get_status(),
        "database": "gcp_firestore",
        "storage": "gcp_cloud_storage"
    }

async def process_task_prediction(task_type: str, input_data: dict, job_name: str, 
                                use_msa: bool, use_potentials: bool) -> dict:
    """Process task-specific predictions"""
    try:
        if task_type == "protein_ligand_binding":
            # Extract protein sequences and ligands
            protein_sequences = []
            ligands = []
            
            for seq in input_data["sequences"]:
                if "protein" in seq:
                    protein_sequences.append(seq["protein"]["sequence"])
                elif "ligand" in seq:
                    ligands.append(seq["ligand"]["smiles"])
            
            # Process protein-ligand binding using Modal execution service
            try:
                from services.modal_execution_service import modal_execution_service

                # Use the unified Modal execution service
                result = await modal_execution_service.execute_prediction(
                    model_type='boltz2',
                    parameters={
                        'protein_sequences': protein_sequences,
                        'ligands': ligands,
                        'use_msa_server': use_msa,
                        'use_potentials': use_potentials
                    },
                    job_id=job_id
                )

                output_data = {
                    "confidence_score": result.get("confidence_score", 0),
                    "ptm": result.get("ptm_score", 0),
                    "plddt": result.get("plddt_score", 0),
                    "affinity_analysis": result.get("affinity_analysis", {}),
                    "structure_file": result.get("structure_file_base64"),
                    "modal_call_id": result.get("modal_call_id")
                }

            except Exception as e:
                logger.error(f"Modal execution failed: {e}")
                # Fallback to mock data only if Modal service is unavailable
                output_data = {
                    "confidence_score": 0.85,
                    "ptm": 0.78,
                    "plddt": 0.82,
                    "affinity_analysis": {
                        "ic50_nM": 150.5,
                        "affinity_class": "Moderate",
                        "binding_probability": 0.75
                    },
                    "structure_file": "mock_structure_data",
                    "warning": "Using mock data due to service unavailability"
                }
            
        elif task_type == "protein_structure":
            # Extract protein sequence
            protein_sequence = None
            for seq in input_data["sequences"]:
                if "protein" in seq:
                    protein_sequence = seq["protein"]["sequence"]
                    break
            
            if not protein_sequence:
                raise ValueError("No protein sequence found")
            
            # Process protein structure prediction using Modal execution service
            try:
                from services.modal_execution_service import modal_execution_service

                # Use the unified Modal execution service
                result = await modal_execution_service.execute_prediction(
                    model_type='boltz2',
                    parameters={
                        'protein_sequences': [protein_sequence],
                        'ligands': [""],
                        'use_msa_server': use_msa,
                        'use_potentials': use_potentials
                    },
                    job_id=job_id
                )

                output_data = {
                    "confidence_score": result.get("confidence_score", 0),
                    "ptm": result.get("ptm_score", 0),
                    "plddt": result.get("plddt_score", 0),
                    "structure_file": result.get("structure_file_base64"),
                    "modal_call_id": result.get("modal_call_id")
                }

            except Exception as e:
                logger.error(f"Modal execution failed: {e}")
                # Fallback to mock data only if Modal service is unavailable
                output_data = {
                    "confidence_score": 0.88,
                    "ptm": 0.85,
                    "plddt": 0.89,
                    "structure_file": "mock_structure_data",
                    "warning": "Using mock data due to service unavailability"
                }
            
        else:
            raise HTTPException(status_code=400, detail=f"Unsupported task type: {task_type}")
        
        return output_data
        
    except Exception as e:
        print(f"Error processing {task_type} prediction: {e}")
        raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}")

@app.post("/api/boltz/predict", response_model=TaskPredictResponse)
async def predict_task(request: TaskPredictRequest):
    """Handle task-specific predictions"""
    
    # Generate job ID
    job_id = str(uuid.uuid4())
    
    # Create job entry using unified job manager
    from database.unified_job_manager import unified_job_manager
    job_data = {
        "id": job_id,
        "model_name": "boltz2",
        "status": "pending",
        "type": "boltz2",
        "name": f"RFAntibody Prediction {job_id[:8]}",
        "parameters": {
            "task_type": request.task_type,
            "input_data": request.input_data,
            "use_msa": request.use_msa,
            "use_potentials": request.use_potentials
        }
    }
    created_job_id = await unified_job_manager.create_job(job_data)
    
    actual_job_id = created_job_id
    
    try:
        # Process the prediction
        output_data = await process_task_prediction(
            task_type=request.task_type,
            input_data=request.input_data,
            job_name=request.job_name,
            use_msa=request.use_msa,
            use_potentials=request.use_potentials
        )
        
        # Update job with results
        unified_job_manager.update_job_result(actual_job_id, {"status": "completed", "results": output_data})
        
        return TaskPredictResponse(
            job_id=actual_job_id,
            task_type=request.task_type,
            status="completed",
            message=f"{request.task_type.replace('_', ' ').title()} prediction completed successfully",
            output_data=output_data
        )
        
    except Exception as e:
        # Update job with error
        unified_job_manager.update_job_result(actual_job_id, {"status": "failed", "error": str(e)})
        
        raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}")

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)